@import "config";

/*
BEM support FUnc

*/


/*将我们的选择器转换成一个字符串*/
@function selectorToString($selector){
  $selector:inspect($selector);
  $selector:str-slice($selector,2,-2);
  @return $selector;
}

/*
*str_length(string) 返回string长度
*str_insert(string,insert,index)从字符串的index插入字符insert
*str_slice(string,start_at,end_at=nil)返回字符string中第start_at开始到end_at结束的一个新字符串
*str_index(string,substring) 返回substring在string中第一个位置
*/


/*是否存在修饰符*/
@function containsModifier($selector){
  $selector :selectorToString($selector);

  @if str-index($selector,$modifier-separator){ /*--*/
    @return true;
  } @else{
    @return false;
  }
}

/*是否有.is*/
@function containWhenFlag($selector){
  $selector:selectorToString($selector);

  @if str-index($selector,'.'+$state-prefix){
    @return true;
  } @else{
    @return false;
  }
}

/*是否存在伪类*/
@function containPseudoClass($selector){
  $selector:selectorToString($selector);

  @if str-index($selector,":"){
    @return true;
  } @else{
    @return false;
  }
}

@function hitAllSpecialNestRule($selector){
  @return containsModifier($selector) or containWhenFlag($selector) or containPseudoClass($selector);
}
/*在修饰符或者其他mixin中嵌套一个元素element,会出现修饰符在前，而元素在后的编译结果。所以用hitAllSpecoalNestRule函数来判断是否存在特殊的嵌套，如果存在的话，将我们的元素字符串写在前面，而修饰符放在后面，如果不存在，则原样输出*/
